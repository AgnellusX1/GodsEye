import React, { useState, useRef, useEffect, useCallback } from 'react';
import fscreen from 'fscreen';

function useFullScreenHandle() {
  var _useState = useState(false),
      active = _useState[0],
      setActive = _useState[1];

  var node = useRef(null);
  useEffect(function () {
    var handleChange = function handleChange() {
      setActive(fscreen.fullscreenElement === node.current);
    };

    fscreen.addEventListener('fullscreenchange', handleChange);
    return function () {
      return fscreen.removeEventListener('fullscreenchange', handleChange);
    };
  }, []);
  var enter = useCallback(function () {
    if (fscreen.fullscreenElement) {
      fscreen.exitFullscreen().then(function () {
        fscreen.requestFullscreen(node.current);
      });
    } else if (node.current) {
      fscreen.requestFullscreen(node.current);
    }
  }, []);
  var exit = useCallback(function () {
    if (fscreen.fullscreenElement === node.current) {
      fscreen.exitFullscreen();
    }
  }, []);
  return {
    active: active,
    enter: enter,
    exit: exit,
    node: node
  };
}
var FullScreen = function FullScreen(_ref) {
  var handle = _ref.handle,
      onChange = _ref.onChange,
      children = _ref.children;
  var classNames = ['fullscreen'];

  if (handle.active) {
    classNames.push('fullscreen-enabled');
  }

  useEffect(function () {
    if (onChange) {
      onChange(handle.active, handle);
    }
  }, [handle.active]);
  return React.createElement("div", {
    className: classNames.join(' '),
    ref: handle.node,
    style: handle.active ? {
      height: '100%',
      width: '100%'
    } : undefined
  }, children);
};

export { FullScreen, useFullScreenHandle };
//# sourceMappingURL=index.modern.js.map

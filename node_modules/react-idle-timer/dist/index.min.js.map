{"version":3,"file":"index.min.js","sources":["../src/utils.js","../src/IdleTimer.js","../src/useIdleTimer.js"],"sourcesContent":["/**\n * Determine if we are in a browser\n * or a server environment\n * @type {Boolean}\n * @private\n */\nexport const IS_BROWSER =\n  (typeof window === 'undefined' ? 'undefined' : typeof window) === 'object'\n\n/**\n * Default element to listen for events on\n * @type {Object}\n * @private\n */\nexport const DEFAULT_ELEMENT = IS_BROWSER ? document : {}\n\n/**\n * The default events to determine activity\n * @type {Array}\n * @private\n */\nexport const DEFAULT_EVENTS = [\n  'mousemove',\n  'keydown',\n  'wheel',\n  'DOMMouseScroll',\n  'mousewheel',\n  'mousedown',\n  'touchstart',\n  'touchmove',\n  'MSPointerDown',\n  'MSPointerMove',\n  'visibilitychange'\n]\n\n/**\n * Creates a debounced function that delays invoking func until\n * after delay milliseconds has elapsed since the last time the\n * debounced function was invoked.\n * @name debounced\n * @param  {Function} fn   Function to debounce\n * @param  {Number} delay  How long to wait\n * @return {Function}      Executed Function\n * @private\n **/\nexport function debounced (fn, delay) {\n  let timerId\n  return function (...args) {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n    timerId = setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n}\n\n/**\n * Creates a throttled function that only invokes func at most\n * once per every wait milliseconds.\n * @name throttled\n * @param  {Function} fn   Function to debounce\n * @param  {Number} delay  How long to wait\n * @return {Function}      Executed Function\n * @private\n **/\nexport function throttled (fn, delay) {\n  let lastCall = 0\n  return function (...args) {\n    const now = new Date().getTime()\n    if (now - lastCall < delay) {\n      return\n    }\n    lastCall = now\n    return fn(...args)\n  }\n}\n","/**\n *  ___    _ _     _____ _\n * |_ _|__| | | __|_   _(_)_ __ ___   ___ _ __\n *  | |/ _` | |/ _ \\| | | | '_ ` _ \\ / _ \\ '__|\n *  | | (_| | |  __/| | | | | | | | |  __/ |\n * |___\\__,_|_|\\___||_| |_|_| |_| |_|\\___|_|\n *\n * @name IdleTimer\n * @author Randy Lebeau\n * @private\n */\n\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { IS_BROWSER, DEFAULT_ELEMENT, DEFAULT_EVENTS, debounced, throttled } from './utils'\n\n/**\n * Detects when your user is idle\n * @class IdleTimer\n * @private\n */\nclass IdleTimer extends Component {\n  /**\n   * Creates an instance of IdleTimer\n   * bind all of our internal events here\n   * for best performance\n   * @param {Object} props\n   * @return {IdleTimer}\n   * @private\n   */\n  constructor (props) {\n    super(props)\n\n    /**\n     * Sets initial component state\n     * @type {Object}\n     * @private\n     */\n    this.state = {\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      lastIdle: null,\n      idleTime: 0,\n      remaining: null,\n      pageX: null,\n      pageY: null\n    }\n\n    /**\n     * The timer instance\n     * @type {Timeout}\n     * @private\n     */\n    this.tId = null\n\n    /**\n     * Wether or not events are bound\n     * @type {boolean}\n     * @private\n     */\n    this.eventsBound = false\n\n    // Debounce and throttle can't both be set\n    if (props.debounce > 0 && props.throttle > 0) {\n      throw new Error('onAction can either be throttled or debounced (not both)')\n    }\n\n    // Create debounced action if applicable\n    if (props.debounce > 0) {\n      this._onAction = debounced(props.onAction, props.debounce)\n\n    // Create throttled action if applicable\n    } else if (props.throttle > 0) {\n      this._onAction = throttled(props.onAction, props.throttle)\n\n    // Set custom onAction\n    } else if (props.onAction) {\n      this._onAction = props.onAction\n\n    // Set default onAction\n    } else {\n      this._onAction = () => {}\n    }\n\n    // Create a throttle event handler if applicable\n    if (props.eventsThrottle > 0) {\n      this._handleEvent = throttled(this._handleEvent.bind(this), props.eventsThrottle)\n    } else {\n      this._handleEvent = this._handleEvent.bind(this)\n    }\n\n    // If startOnMount is set, idle state defaults to true\n    if (!props.startOnMount) {\n      this.state.idle = true\n    }\n\n    // Bind all events to component scope, built for speed ðŸš€\n    this._toggleIdleState = this._toggleIdleState.bind(this)\n    this.reset = this.reset.bind(this)\n    this.pause = this.pause.bind(this)\n    this.resume = this.resume.bind(this)\n    this.getRemainingTime = this.getRemainingTime.bind(this)\n    this.getElapsedTime = this.getElapsedTime.bind(this)\n    this.getLastActiveTime = this.getLastActiveTime.bind(this)\n    this.isIdle = this.isIdle.bind(this)\n  }\n\n  /**\n   * Runs once the component has mounted\n   * here we handle automatically starting\n   * the idletimer\n   * @private\n   */\n  componentDidMount () {\n    // Bind the event listeners\n    this._bindEvents()\n    // If startOnMount is enabled start the timer\n    const { startOnMount } = this.props\n    if (startOnMount) {\n      this.reset()\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    // Update debounce function\n    if (prevProps.debounce !== this.props.debounce) {\n      this._onAction = debounced(this._onAction, this.props.debounce)\n    }\n    // Update throttle function\n    if (prevProps.throttle !== this.props.throttle) {\n      this._onAction = throttled(this._onAction, this.props.throttle)\n    }\n    // Update event throttle function\n    if (prevProps.eventsThrottle !== this.props.eventsThrottle) {\n      this._handleEvent = throttled(this._handleEvent, this.props.eventsThrottle)\n    }\n  }\n\n  /**\n   * Called before the component unmounts\n   * here we clear the timer and remove\n   * all the event listeners\n   * @private\n   */\n  componentWillUnmount () {\n    // Clear timeout to prevent delayed state changes\n    clearTimeout(this.tId)\n    this._unbindEvents(true)\n  }\n\n  /**\n   * Render children if IdleTimer is used as a wrapper\n   * @return {Component} children\n   * @private\n   */\n  render () {\n    const { children } = this.props\n    return children || null\n  }\n\n  /**\n   * Binds the specified events\n   * @private\n   */\n  _bindEvents () {\n    // Don't bind events if\n    // we are not in a browser\n    if (!IS_BROWSER) return\n    // Otherwise we bind all the events\n    // to the supplied element\n    const { element, events, passive, capture } = this.props\n    if (!this.eventsBound) {\n      events.forEach(e => {\n        element.addEventListener(e, this._handleEvent, {\n          capture,\n          passive\n        })\n      })\n      this.eventsBound = true\n    }\n  }\n\n  /**\n   * Unbinds all the bound events\n   * @private\n   */\n  _unbindEvents (force = false) {\n    // If we are not in a browser\n    // we don't need to unbind events\n    if (!IS_BROWSER) return\n    // Unbind all events\n    const { element, events, passive, capture } = this.props\n    if (this.eventsBound || force) {\n      events.forEach(e => {\n        element.removeEventListener(e, this._handleEvent, {\n          capture,\n          passive\n        })\n      })\n      this.eventsBound = false\n    }\n  }\n\n  /**\n   * Toggles the idle state and calls\n   * the correct action function\n   * @private\n   */\n  _toggleIdleState (e) {\n    // Fire the appropriate action\n    // and pass the event through\n    // Toggle the idle state\n    this.setState((prevState) => ({\n      idle: !prevState.idle,\n      lastIdle: !prevState.idle ? (+new Date()) - this.props.timeout : prevState.lastIdle,\n      idleTime: prevState.idle ? prevState.idleTime + (+new Date()) - prevState.lastIdle : prevState.idleTime\n    }), () => {\n      const { onActive, onIdle, stopOnIdle } = this.props\n      const { idle } = this.state\n      if (idle) {\n        if (stopOnIdle) {\n          // Clear any existing timeout\n          clearTimeout(this.tId)\n          this.tId = null\n          // Unbind events\n          this._unbindEvents()\n        }\n\n        onIdle(e)\n      } else {\n        if (!stopOnIdle) {\n          this._bindEvents()\n          onActive(e)\n        }\n      }\n    })\n  }\n\n  /**\n   * Event handler for supported event types\n   * @param  {Object} e event object\n   * @private\n   */\n  _handleEvent (e) {\n    const { remaining, pageX, pageY, idle } = this.state\n    const { timeout, stopOnIdle } = this.props\n\n    // Fire onAction event\n    this._onAction(e)\n\n    // Already active, ignore events\n    if (remaining) return\n\n    // Mousemove event\n    if (e.type === 'mousemove') {\n      // If coords are same, it didn't move\n      if (e.pageX === pageX && e.pageY === pageY) {\n        return\n      }\n      // If coords don't exist how could it move\n      if (typeof e.pageX === 'undefined' && typeof e.pageY === 'undefined') {\n        return\n      }\n      // Under 200 ms is hard to do\n      // continuous activity will bypass this\n      const elapsed = this.getElapsedTime()\n      if (elapsed < 200) {\n        return\n      }\n    }\n\n    // Clear any existing timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Determine last time User was active, as can't rely on setTimeout ticking at the correct interval\n    const elapsedTimeSinceLastActive = +new Date() - this.getLastActiveTime()\n\n    // If the user is idle or last active time is more than timeout, flip the idle state\n    if ((idle && !stopOnIdle) || (!idle && elapsedTimeSinceLastActive > timeout)) {\n      this._toggleIdleState(e)\n    }\n\n    // Store when the user was last active\n    // and update the mouse coordinates\n    this.setState({\n      lastActive: +new Date(),\n      pageX: e.pageX,\n      pageY: e.pageY\n    })\n\n    // If the user is idle and stopOnIdle flag is not set\n    // set a new timeout\n    if (idle) {\n      if (!stopOnIdle) {\n        this.tId = setTimeout(this._toggleIdleState, timeout)\n      }\n    } else {\n      this.tId = setTimeout(this._toggleIdleState, timeout)\n    }\n  }\n\n  /**\n   * Restore initial state and restart timer\n   * @name reset\n   */\n  reset () {\n    // Clear timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Bind the events\n    this._bindEvents()\n\n    // Reset state\n    this.setState({\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      remaining: null\n    })\n\n    // Set new timeout\n    const { timeout } = this.props\n    this.tId = setTimeout(this._toggleIdleState, timeout)\n  }\n\n  /**\n   * Store remaining time and stop timer\n   * @name pause\n   */\n  pause () {\n    // Timer is already paused\n    const { remaining } = this.state\n    if (remaining !== null) return\n\n    // Unbind events\n    this._unbindEvents()\n\n    // Clear existing timeout\n    clearTimeout(this.tId)\n    this.tId = null\n\n    // Define how much is left on the timer\n    this.setState({\n      remaining: this.getRemainingTime()\n    })\n  }\n\n  /**\n   * Resumes a paused timer\n   * @name resume\n   */\n  resume () {\n    // Timer is not paused\n    const { remaining, idle } = this.state\n    if (remaining === null) return\n\n    // Bind events\n    this._bindEvents()\n\n    // Start timer and clear remaining\n    // if we are in the idle state\n    if (!idle) {\n      // Set a new timeout\n      this.tId = setTimeout(this._toggleIdleState, remaining)\n      // Set new state\n      this.setState({ remaining: null, lastActive: +new Date() })\n    }\n  }\n\n  /**\n   * Time remaining before idle\n   * @name getRemainingTime\n   * @return {number} Milliseconds remaining\n   */\n  getRemainingTime () {\n    const { remaining, lastActive } = this.state\n    const { timeout } = this.props\n\n    // If idle there is no time remaining\n    if (remaining !== null) {\n      return remaining < 0 ? 0 : remaining\n    }\n\n    // Determine remaining, if negative idle didn't finish flipping, just return 0\n    const timeLeft = timeout - ((+new Date()) - lastActive)\n    return timeLeft < 0 ? 0 : timeLeft\n  }\n\n  /**\n   * How much time has elapsed\n   * @name getElapsedTime\n   * @return {Timestamp}\n   */\n  getElapsedTime () {\n    const { oldDate } = this.state\n    return (+new Date()) - oldDate\n  }\n\n  /**\n   * Last time the user was idle\n   * @name getLastIdleTime\n   * @return {Timestamp}\n   */\n  getLastIdleTime () {\n    const { lastIdle } = this.state\n    return lastIdle\n  }\n\n  /**\n   * Total time the user was idle\n   * @name getTotalIdleTime\n   * @return {number}\n   */\n  getTotalIdleTime () {\n    const { idle, lastIdle, idleTime } = this.state\n    if (idle) {\n      return ((+new Date()) - lastIdle) + idleTime\n    } else {\n      return idleTime\n    }\n  }\n\n  /**\n   * Last time the user was active\n   * @name getLastActiveTime\n   * @return {Timestamp}\n   */\n  getLastActiveTime () {\n    const { lastActive } = this.state\n    return lastActive\n  }\n\n  /**\n   * Total time the user was active\n   * @name getTotalActiveTime\n   * @return {number}\n   */\n  getTotalActiveTime () {\n    return this.getElapsedTime() - this.getTotalIdleTime()\n  }\n\n  /**\n   * Returns wether or not the user is idle\n   * @name isIdle\n   * @return {boolean}\n   */\n  isIdle () {\n    const { idle } = this.state\n    return idle\n  }\n}\n\n/**\n * Type checks for every property\n * @type {Object}\n * @private\n */\nIdleTimer.propTypes = {\n  /**\n   * Activity Timeout in milliseconds\n   * default: 1200000\n   * @type {Number}\n   */\n  timeout: PropTypes.number,\n  /**\n   * DOM events to listen to\n   * default: see [default events](https://github.com/SupremeTechnopriest/react-idle-timer#default-events)\n   * @type {Array}\n   */\n  events: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function to call when user is idle\n   * default: () => {}\n   * @type {Function}\n   */\n  onIdle: PropTypes.func,\n  /**\n   * Function to call when user becomes active\n   * default: () => {}\n   * @type {Function}\n   */\n  onActive: PropTypes.func,\n  /**\n   * Function to call on user actions\n   * default: () => {}\n   * @type {Function}\n   */\n  onAction: PropTypes.func,\n  /**\n   * Debounce the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  debounce: PropTypes.number,\n  /**\n   * Throttle the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  throttle: PropTypes.number,\n  /**\n   * Throttle the event handler function by setting delay in milliseconds\n   * default: 200\n   * @type {Number}\n   */\n  eventsThrottle: PropTypes.number,\n  /**\n   * Element reference to bind activity listeners to\n   * default: document\n   * @type {Object}\n   */\n  element: PropTypes.oneOfType([PropTypes.object, PropTypes.element]),\n  /**\n   * Start the timer on mount\n   * default: true\n   * @type {Boolean}\n   */\n  startOnMount: PropTypes.bool,\n  /**\n   * Once the user goes idle the IdleTimer will not\n   * reset on user input instead, reset() must be\n   * called manually to restart the timer\n   * default: false\n   * @type {Boolean}\n   */\n  stopOnIdle: PropTypes.bool,\n  /**\n   * Bind events passively\n   * default: true\n   * @type {Boolean}\n   */\n  passive: PropTypes.bool,\n  /**\n   * Capture events\n   * default: true\n   * @type {Boolean}\n   */\n  capture: PropTypes.bool\n}\n\n/**\n * Sets default property values\n * @type {Object}\n * @private\n */\nIdleTimer.defaultProps = {\n  timeout: 1000 * 60 * 20,\n  element: DEFAULT_ELEMENT,\n  events: DEFAULT_EVENTS,\n  onIdle: () => { },\n  onActive: () => { },\n  onAction: () => { },\n  debounce: 0,\n  throttle: 0,\n  eventsThrottle: 200,\n  startOnMount: true,\n  stopOnIdle: false,\n  capture: true,\n  passive: true\n}\n\nexport default IdleTimer\n","/**\n *  ___    _ _     _____ _\n * |_ _|__| | | __|_   _(_)_ __ ___   ___ _ __\n *  | |/ _` | |/ _ \\| | | | '_ ` _ \\ / _ \\ '__|\n *  | | (_| | |  __/| | | | | | | | |  __/ |\n * |___\\__,_|_|\\___||_| |_|_| |_| |_|\\___|_|\n *\n * @name useIdleTimer\n * @author Randy Lebeau\n * @private\n */\n\nimport { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { IS_BROWSER, DEFAULT_ELEMENT, DEFAULT_EVENTS, debounced, throttled } from './utils'\n\n/**\n * Detects when your user is idle\n * @function useIdleTimer\n * @private\n */\nfunction useIdleTimer ({\n  timeout = 1000 * 60 * 20,\n  element = DEFAULT_ELEMENT,\n  events = DEFAULT_EVENTS,\n  onIdle = () => {},\n  onActive = () => {},\n  onAction = () => {},\n  debounce = 0,\n  throttle = 0,\n  eventsThrottle = 200,\n  startOnMount = true,\n  stopOnIdle = false,\n  capture = true,\n  passive = true\n} = {}) {\n  const eventsBound = useRef(false)\n  const idle = useRef(true)\n  const oldDate = useRef(+new Date())\n  const remaining = useRef(null)\n  const pageX = useRef(null)\n  const pageY = useRef(null)\n  const tId = useRef(null)\n  const lastActive = useRef(null)\n  const lastIdle = useRef(null)\n  const idleTime = useRef(0)\n\n  // Event emitters\n  const emitOnIdle = useRef(onIdle)\n  const emitOnActive = useRef(onActive)\n  const emitOnAction = useRef(onAction)\n\n  /**\n   * Toggles the idle state and calls\n   * the correct action function\n   * @private\n   */\n  const _toggleIdleState = e => {\n    const nextIdle = !idle.current\n    idle.current = nextIdle\n    if (nextIdle) {\n      if (stopOnIdle) {\n        // Clear any existing timeout\n        clearTimeout(tId.current)\n        tId.current = null\n        // Unbind events\n        _unbindEvents()\n      }\n      lastIdle.current = (+new Date()) - timeout\n      emitOnIdle.current(e)\n    } else {\n      if (!stopOnIdle) {\n        idleTime.current += (+new Date()) - lastIdle.current\n        _bindEvents()\n        emitOnActive.current(e)\n      }\n    }\n  }\n\n  /**\n   * Event handler\n   * @param {Event} e\n   */\n  let _handleEvent = e => {\n    // Fire onAction event\n    emitOnAction.current(e)\n\n    // Already active, ignore events\n    if (remaining.current) return\n\n    // Mousemove event\n    if (e.type === 'mousemove') {\n      // If coords are same, it didn't move\n      if (e.pageX === pageX && e.pageY === pageY) {\n        return\n      }\n      // If coords don't exist how could it move\n      if (typeof e.pageX === 'undefined' && typeof e.pageY === 'undefined') {\n        return\n      }\n      // Under 200 ms is hard to do\n      // continuous activity will bypass this\n      const elapsed = getElapsedTime()\n      if (elapsed < 200) {\n        return\n      }\n    }\n\n    // Clear any existing timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Determine last time User was active, as can't rely on setTimeout ticking at the correct interval\n    const elapsedTimeSinceLastActive = +new Date() - getLastActiveTime()\n\n    // If the user is idle or last active time is more than timeout, flip the idle state\n    if (\n      (idle.current && !stopOnIdle) ||\n      (!idle.current && elapsedTimeSinceLastActive > timeout)\n    ) {\n      _toggleIdleState(e)\n    }\n\n    // Store when the user was last active\n    // and update the mouse coordinates\n    lastActive.current = +new Date()\n    pageX.current = e.pageX\n    pageY.current = e.pageY\n\n    // If the user is idle and stopOnIdle flag is not set\n    // set a new timeout\n    if (idle.current) {\n      if (!stopOnIdle) {\n        tId.current = setTimeout(_toggleIdleState, timeout)\n      }\n    } else {\n      tId.current = setTimeout(_toggleIdleState, timeout)\n    }\n  }\n\n  /**\n   * Binds the specified events\n   * @private\n   */\n  const _bindEvents = () => {\n    // Don't bind events if\n    // we are not in a browser\n    if (!IS_BROWSER) return\n    // Otherwise we bind all the events\n    // to the supplied element\n    if (!eventsBound.current) {\n      events.forEach(e => {\n        element.addEventListener(e, _handleEvent, {\n          capture,\n          passive\n        })\n      })\n      eventsBound.current = true\n    }\n  }\n\n  /**\n   * Unbinds all the bound events\n   * @private\n   */\n  const _unbindEvents = (force = false) => {\n    // If we are not in a browser\n    // we don't need to unbind events\n    if (!IS_BROWSER) return\n    // Unbind all events\n    if (eventsBound.current || force) {\n      events.forEach(e => {\n        element.removeEventListener(e, _handleEvent, {\n          capture,\n          passive\n        })\n      })\n      eventsBound.current = false\n    }\n  }\n\n  /**\n   * Time remaining before idle\n   * @name getRemainingTime\n   * @return {number} Milliseconds remaining\n   */\n  const getRemainingTime = () => {\n    // If idle there is no time remaining\n    if (remaining.current !== null) {\n      return remaining.current < 0 ? 0 : remaining.current\n    }\n\n    // Determine remaining, if negative idle didn't finish flipping, just return 0\n    const timeLeft = timeout - ((+new Date()) - lastActive.current)\n    return timeLeft < 0 ? 0 : timeLeft\n  }\n\n  /**\n   * How much time has elapsed\n   * @name getElapsedTime\n   * @return {Timestamp}\n   */\n  const getElapsedTime = () => (+new Date()) - oldDate.current\n\n  /**\n   * Last time the user was idle\n   * @name getLastIdleTime\n   * @return {Timestamp}\n   */\n  const getLastIdleTime = () => lastIdle.current\n\n  /**\n   * Get the total time user is idle\n   * @name getTotalIdleTime\n   * @return {number} Milliseconds idle\n   */\n  const getTotalIdleTime = () => {\n    if (idle.current) {\n      return ((+new Date()) - lastIdle.current) + idleTime.current\n    } else {\n      return idleTime.current\n    }\n  }\n\n  /**\n   * Last time the user was active\n   * @name getLastActiveTime\n   * @return {Timestamp}\n   */\n  const getLastActiveTime = () => lastActive.current\n\n  /**\n   * Get the total time user is active\n   * @name getTotalActiveTime\n   * @return {number} Milliseconds active\n   */\n  const getTotalActiveTime = () => getElapsedTime() - getTotalIdleTime()\n\n  /**\n   * Returns wether or not the user is idle\n   * @name isIdle\n   * @return {Boolean}\n   */\n  const isIdle = () => idle.current\n\n  /**\n * Restore initial state and restart timer\n * @name reset\n */\n  const reset = () => {\n    // Clear timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Bind the events\n    _bindEvents()\n\n    // Reset state\n    idle.current = false\n    oldDate.current = +new Date()\n    lastActive.current = +new Date()\n    remaining.current = null\n\n    // Set new timeout\n    tId.current = setTimeout(_toggleIdleState, timeout)\n  }\n\n  /**\n   * Store remaining time and stop timer\n   * @name pause\n   */\n  const pause = () => {\n    // Timer is already paused\n    if (remaining.current !== null) return\n\n    // Unbind events\n    _unbindEvents()\n\n    // Clear existing timeout\n    clearTimeout(tId.current)\n    tId.current = null\n\n    // Define how much is left on the timer\n    remaining.current = getRemainingTime()\n  }\n\n  /**\n   * Resumes a paused timer\n   * @name resume\n   */\n  const resume = () => {\n    // Timer is not paused\n    if (remaining.current === null) return\n\n    // Bind events\n    _bindEvents()\n\n    // Start timer and clear remaining\n    // if we are in the idle state\n    if (!idle.current) {\n      // Set a new timeout\n      tId.current = setTimeout(_toggleIdleState, remaining.current)\n      // Set states\n      remaining.current = null\n      lastActive.current = +new Date()\n    }\n  }\n\n  /**\n   * Hook lifecycle\n   */\n  useEffect(() => {\n    // Debounce and throttle can't both be set\n    if (debounce > 0 && throttle > 0) {\n      throw new Error('onAction can either be throttled or debounced (not both)')\n    }\n\n    // Create a throttle event handler if applicable\n    if (eventsThrottle > 0) {\n      _handleEvent = throttled(_handleEvent, eventsThrottle)\n    }\n\n    // Bind the events\n    _bindEvents()\n\n    // If startOnMount is enabled, start the timer\n    if (startOnMount) reset()\n\n    // Clear and unbind on unmount\n    return () => {\n      clearTimeout(tId.current)\n      _unbindEvents(true)\n    }\n  }, [])\n\n  useEffect(() => {\n    emitOnIdle.current = onIdle\n  }, [onIdle])\n\n  useEffect(() => {\n    emitOnActive.current = onActive\n  }, [onActive])\n\n  useEffect(() => {\n    // Create debounced action if applicable\n    if (debounce > 0) {\n      emitOnAction.current = debounced(onAction, debounce)\n\n    // Create throttled action if applicable\n    } else if (throttle > 0) {\n      emitOnAction.current = throttled(onAction, throttle)\n\n    // No throttle or debounce\n    } else {\n      emitOnAction.current = onAction\n    }\n  }, [onAction])\n\n  return {\n    isIdle,\n    pause,\n    reset,\n    resume,\n    getLastIdleTime,\n    getTotalIdleTime,\n    getLastActiveTime,\n    getTotalActiveTime,\n    getElapsedTime,\n    getRemainingTime\n  }\n}\n\n/**\n * Type checks for every property\n * @type {Object}\n * @private\n */\nuseIdleTimer.propTypes = {\n  /**\n   * Activity Timeout in milliseconds\n   * default: 1200000\n   * @type {number}\n   */\n  timeout: PropTypes.number,\n  /**\n   * DOM events to listen to\n   * default: see [default events](https://github.com/SupremeTechnopriest/react-idle-timer#default-events)\n   * @type {Array}\n   */\n  events: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function to call when user is idle\n   * default: () => {}\n   * @type {Function}\n   */\n  onIdle: PropTypes.func,\n  /**\n   * Function to call when user becomes active\n   * default: () => {}\n   * @type {Function}\n   */\n  onActive: PropTypes.func,\n  /**\n   * Function to call on user actions\n   * default: () => {}\n   * @type {Function}\n   */\n  onAction: PropTypes.func,\n  /**\n   * Debounce the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {number}\n   */\n  debounce: PropTypes.number,\n  /**\n   * Throttle the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {number}\n   */\n  throttle: PropTypes.number,\n  /**\n   * Throttle the event handler function by setting delay in milliseconds\n   * default: 200\n   * @type {number}\n   */\n  eventsThrottle: PropTypes.number,\n  /**\n   * Element reference to bind activity listeners to\n   * default: document\n   * @type {Object}\n   */\n  element: PropTypes.oneOfType([PropTypes.object, PropTypes.element]),\n  /**\n   * Start the timer on mount\n   * default: true\n   * @type {Boolean}\n   */\n  startOnMount: PropTypes.bool,\n  /**\n   * Once the user goes idle the IdleTimer will not\n   * reset on user input instead, reset() must be\n   * called manually to restart the timer\n   * default: false\n   * @type {Boolean}\n   */\n  stopOnIdle: PropTypes.bool,\n  /**\n   * Bind events passively\n   * default: true\n   * @type {Boolean}\n   */\n  passive: PropTypes.bool,\n  /**\n   * Capture events\n   * default: true\n   * @type {Boolean}\n   */\n  capture: PropTypes.bool\n}\n\n/**\n * Sets default property values\n * @type {Object}\n * @private\n */\nuseIdleTimer.defaultProps = {\n  timeout: 1000 * 60 * 20,\n  element: DEFAULT_ELEMENT,\n  events: DEFAULT_EVENTS,\n  onIdle: () => { },\n  onActive: () => { },\n  onAction: () => { },\n  debounce: 0,\n  throttle: 0,\n  eventsThrottle: 200,\n  startOnMount: true,\n  stopOnIdle: false,\n  capture: true,\n  passive: true\n}\n\nexport default useIdleTimer\n"],"names":["IS_BROWSER","window","DEFAULT_ELEMENT","document","DEFAULT_EVENTS","debounced","fn","delay","timerId","args","clearTimeout","setTimeout","throttled","lastCall","now","Date","getTime","IdleTimer","Component","props","state","idle","oldDate","lastActive","lastIdle","idleTime","remaining","pageX","pageY","tId","eventsBound","debounce","throttle","Error","_onAction","onAction","eventsThrottle","_handleEvent","_this","bind","startOnMount","_toggleIdleState","reset","pause","resume","getRemainingTime","getElapsedTime","getLastActiveTime","isIdle","_bindEvents","this","prevProps","_unbindEvents","children","element","events","passive","capture","forEach","e","addEventListener","_this2","force","removeEventListener","_this3","setState","prevState","_this4","timeout","onActive","onIdle","stopOnIdle","type","elapsedTimeSinceLastActive","timeLeft","getTotalIdleTime","useIdleTimer","useRef","emitOnIdle","emitOnActive","emitOnAction","nextIdle","current","getLastIdleTime","getTotalActiveTime","useEffect","propTypes","PropTypes","number","arrayOf","string","func","oneOfType","object","bool","defaultProps"],"mappings":"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"}